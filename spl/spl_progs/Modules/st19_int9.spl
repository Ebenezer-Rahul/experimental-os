alias curr_pid R4;
alias curr_proc_entry R5;
alias userSp R6;
alias virPgNo R7;
alias physicalPageNum R8;
alias physicalAddr R9;
alias fileName R10;
alias curr R11;
alias found R12;
alias userPgArea R13;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
userSp = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 + [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 12];
curr_pid = [SYSTEM_STATUS_TABLE + 1];
curr_proc_entry = PROCESS_TABLE + curr_pid * 16;
[curr_proc_entry + 9] = INT_EXEC;

virPgNo = (userSp - 4) / 512;
physicalPageNum = [PTBR + virPgNo * 2];
physicalAddr = physicalPageNum * 512 + (userSp - 4) / 512;
fileName = [physicalAddr];

curr = 0;

found = -1;
while(curr < DISK_SIZE) do 
    if ([INODE_TABLE + curr * 16 + 1] == fileName) then 
        found = curr;
        break;
    endif;
    curr = curr + 1;
endwhile;


if(found == - 1 || [INODE_TABLE + 16 * found] != EXEC) then
    virPgNo = (userSp - 1) / 512;
    physicalPageNum = [PTBR + virPgNo * 2];
    physicalAddr = physicalPageNum * 512 + (userSp - 1) % 512;
    [physicalAddr] = -1;
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
    ireturn;
endif;

userPgArea = [curr_proc_entry + 11];


backup;
    R1 = EXIT_PROCESS;
    R2 = curr_pid;
    call PROCESS_MANAGER;
restore;


[MEMORY_FREE_LIST + userPgArea] = [MEMORY_FREE_LIST + userPgArea] + 1;
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
SP = userPgArea * 512;
[curr_proc_entry + 4] = RUNNING; 
[curr_proc_entry + 7] = found;

//initiating per process table
curr = 0;
while(curr < 8) do
    [userPgArea * 512 + RESOURCE_TABLE_OFFSET + curr * 2] = -1;
    curr = curr + 1;
endwhile;


//library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

backup;
[PTBR + 4] = -1;
[PTBR + 5] = "0000";

[PTBR + 6] = -1;
[PTBR + 7] = "0000";

R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
[PTBR + 16] = R0;
[PTBR + 17] = "0110";

R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
[PTBR + 18] = R0;
[PTBR + 19] = "0110";

restore;


curr = 0;

backup;

R1 = GET_CODE_PAGE;
R2 = [INODE_TABLE + found * 16 + 8];
call MEMORY_MANAGER;

[PTBR + 8] = R0;
[PTBR + 9] = "0100";
restore;

[PTBR + 10] = -1;
[PTBR + 11] = "0000";

[PTBR + 12] = -1;
[PTBR + 13] = "0000";

[PTBR + 14] = -1;
[PTBR + 15] = "0000";

//DISK MAP TABLE
curr = 0;
while(curr < 10) do
    [DISK_MAP_TABLE + curr_pid * 10 + curr] = -1;
    if (curr >= 4 && curr < 8) then
        [DISK_MAP_TABLE + curr_pid * 10 + curr] = [INODE_TABLE + found * 16 + 8 + curr - 4];
    endif;
    curr = curr + 1;
endwhile;


[curr_proc_entry + 9] = 0;
userSp = [PTBR + 16];
[userSp * 512] = [[PTBR + 8] * 512 + 1];
SP = 8 * 512;
breakpoint;
ireturn;
